#!/usr/bin/env python
import subprocess, sys
import time

oid = " ".join(sys.argv[4:])
freq_arg = sys.argv[2]
time_samp = float(freq_arg)
time_samp = 1/time_samp

samples_arg = sys.argv[3]
samples = float(samples_arg)
samples = int(samples)

args = sys.argv[1]
args = args.split(':')
ip = args[0]
port = args[1]
comm = args[2]
change_type = 0
time_ticks22 = 0.0

#if(samples >= 1):
#	loop = samples+1 
#elif(samples == -1):
#	loop = 1
#elif(samples == 0):
#	loop = 0
#else:
#	print("Incorrect samples value entered")
#	exit() 

time_ticks11 = 0.0
old_arr = []

num = 1
while 1:
	delay1 = time.time()
	cmd = "snmpget -v 2c -c"+comm+" "+ip+":"+port+" 1.3.6.1.2.1.1.3.0 "+oid
	try:
		############### Old Counter Value Calculation Statements #######################	
		if(samples == -1):
			pass
		elif(samples == 0):
			print("Incorrect samples value entered")
			exit()
		elif(num <= samples+1):
			pass
		else:
			exit()
		output = []
		new_arr = []
		oid_id = []
		out = []
		out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True)
		if(out.find("Such") != -1):
			break
		change_line = out
		change_line = change_line.splitlines()
		uptime = change_line[0]
		uptime = uptime.split(' ')		
		time_ticks = uptime[3]
		time_ticks = time_ticks.replace('(', '')
		time_ticks = time_ticks.replace(')', '')
		time_ticks22 = float (time_ticks)
		i = 1
		ar_len = len(change_line)
		while i < ar_len:	
			change_value = change_line[i].split(' ')
			change_type = float (change_value[3])      
			new_arr.append(change_type)
			i += 1
		
		############## Rate of Change of Counter Values Calculation Codelines #################
		if(num == 1):
			pass
		else:
			time_ticks = (time_ticks22 - time_ticks11)/100
			if(time_ticks < 0):
				print ("The Device has been Rebooted")
			else:
				output.append(int(round(time.time())))
				k = 0
				while k < len(new_arr):	
					rate_calc = int(new_arr[k]-old_arr[k])
					if(rate_calc < 0):
						counter_check = change_value[2]
						if(counter_check.find('COUNTER64') != -1):
							new_arr[k] = int(new_arr[k] + 2**64)
							rate_calc = int(new_arr[k]-old_arr[k])
							rate_calc = int (rate_calc/round(time_ticks,1))
						elif(counter_check.find('COUNTER') != -1):
							new_arr[k] = int(new_arr[k] + 2**32)
							rate_calc = int(new_arr[k]-old_arr[k])
							rate_calc = int(rate_calc/round(time_ticks,1))
						output.append(rate_calc)
					elif(rate_calc >= 0):
						rate_calc = int(rate_calc/round(time_ticks,1))
						output.append(rate_calc)
					k = k + 1
		if(num == 1):
			pass
			time.sleep(time_samp - (time.time() - delay1))
		else:
			print ' | '.join(map(str, output))
			###Sampling_Time Calculation with respect to program code runtime
			samp_new = time_samp - (time.time() - delay1)
			if(samp_new < 0):
				pass
			else:
				time.sleep(samp_new)
		old_arr = new_arr
		time_ticks11 = time_ticks22
	except subprocess.CalledProcessError as e:
		print e.output
	num = num + 1
#	delay2 = time.time()
	sys.stdout.flush()
